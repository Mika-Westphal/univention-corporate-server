#!/usr/share/ucs-test/runner python
## desc: Rename Domain Users
## tags:
##  - basic
##  - rename_default_account
##  - skip_admember
## roles:
##  - domaincontroller_master
##  - domaincontroller_backup
##  - domaincontroller_slave
##  - memberserver
## exposure: dangerous


import subprocess
from univention.testing.ucr import UCSTestConfigRegistry
import univention.config_registry
import univention.testing.utils as utils
from univention.testing.ucs_samba import wait_for_drs_replication
import univention.testing.strings as uts
from univention.testing.utils import package_installed
import re
import os
import glob
import time

OUTPUT_SINK = open(os.devnull, 'w')


def search_templates(old_group_name, new_group_name):
	templates = glob.glob('/etc/univention/templates/info/*.info')
	file_content = []
	match_filter = '^(Multifile: |File: )'
	# find all template files by iterating over all referenced templates in the ucr *.info files
	for template in templates:
		with open(template, 'r') as content_file:
			# find all lines that start with File or Multifile and strip it to get the paths of the template files
			file_content += ['/' + re.sub(match_filter, '', l).strip() for l in content_file.readlines() if re.match(match_filter, l)]

	file_content = list(dict.fromkeys(file_content))
	for file in file_content:
		if os.path.isfile(file):
			print('Checking template %s' % (file,))
			with open(file, 'r') as content_file:
				# /etc/security/limits.conf contains a comment about Domain Users which we will ignore.
				# But it must contain the new name of the default domainusers group
				content = content_file.read()
				if file == "/etc/security/limits.conf":
					if new_group_name not in content:
						print(content_file.read())
						utils.fail('FAIL: New group name %s not in security conffiles' % (new_group_name,))
				else:
					if old_group_name in content:
						print('\n'.join([l for l in content.splitlines() if old_group_name in l]))
						utils.fail('FAIL: Domain Users still in template file %s' % (file,))

		else:
			print('template not found %s' % (file,))


def wait_for_ucr(iterations, group_name, group_dn, ucr_test):
	success = False
	for i in range(iterations):
		ucr_test.load()
		ucr_group = ucr_test.get('groups/default/domainusers', 'Domain Users')
		print('ucr var is set to : %s' % (ucr_group,))
		if group_name != ucr_group:
			if i == iterations:
				break
			time.sleep(10)
		else:
			print('UCR variable groups/default/domainusers is set correctly to %s' % (group_name,))
			success = True
			break

		print('Notifier maybe hangs? See https://forge.univention.org/bugzilla/show_bug.cgi?id=51804')
		# Workaround for https://forge.univention.org/bugzilla/show_bug.cgi?id=51804
		file_name = '96rename_domainusers_%s' % (uts.random_name(),)
		if ucr_test.get('server/role') == 'master':
			f = open("/var/lib/univention-ldap/listener/%s" % (file_name,), "w+")
			f.write('blabla')
			f.close()
		else:
			cmd = 'echo "test"  > /var/lib/univention-ldap/listener/%s' % (file_name,)
			ssh_process = subprocess.Popen(
				['sshpass', '-d0', 'ssh', '-o', 'StrictHostKeyChecking=no', 'root@%s' % (ucr_test.get('ldap/master'),), cmd],
				stdin=subprocess.PIPE, stdout=OUTPUT_SINK, stderr=OUTPUT_SINK
				)
			ssh_process.communicate("univention")
	return success, ucr_group


def test_rename_domain_users():
	with UCSTestConfigRegistry() as ucr_test:
		ucr_test.load()

		ldap_base = ucr_test.get('ldap/base')
		old_group_name = ucr_test.get('groups/default/domainusers', 'Domain Users')
		old_group_dn = "cn=%s,cn=groups,%s" % (old_group_name, ldap_base)

		new_group_name = uts.random_name()
		new_group_dn = "cn=%s,cn=groups,%s" % (new_group_name, ldap_base)
		try:
			print('\n##################################################################')
			print('Renaming default domainusers group %s to %s' % (old_group_name, new_group_name))
			print('##################################################################\n')
			cmd = (['udm-test', 'groups/group', 'modify', '--dn=%s' % (old_group_dn), '--set', 'name=%s' % (new_group_name)])
			subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=False, close_fds=True)
			utils.wait_for_replication_and_postrun()

			# Check UCR Variable
			print('\n##################################################################')
			print('Checking if UCR Variable groups/default/domainusers is set to %s' % (new_group_name,))
			print('##################################################################\n')

			success, ucr_group = wait_for_ucr(5, new_group_name, new_group_dn, ucr_test)
			if not success:
				utils.fail('UCR variable groups/default/domainusers was set to %s instead of %s' % (ucr_group, new_group_name))

			# Search templates
			print('\n##################################################################')
			print('Search templates for old and new name of default domainusers group')
			print('##################################################################\n')
			search_templates(old_group_name, new_group_name)
		finally:
			try:
				wait_for_drs_replication('(sAMAccountName=%s)' % (new_group_name,))
			except Exception:
				# clean up even if the wait_for method fails and wait a bit if it terminated at the beginning
				time.sleep(10)
				pass
			if not package_installed('univention-samba4'):
				time.sleep(20)
			print('\n##################################################################')
			print('Cleanup')
			print('##################################################################\n')
			cmd = (['udm-test', 'groups/group', 'modify', '--dn=%s' % (new_group_dn), '--set', 'name=%s' % (old_group_name)])
			subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=False, close_fds=True)

			# wait until renaming is complete
			utils.wait_for_replication_and_postrun()
			success, ucr_group = wait_for_ucr(5, old_group_name, old_group_dn, ucr_test)
			if not success:
				univention.config_registry.handler_set(['groups/default/domainusers=Domain Users'])
				print('UCR variable groups/default/domainusers was set to %s instead of %s' % (ucr_group, old_group_name))


if __name__ == '__main__':
	test_rename_domain_users()
