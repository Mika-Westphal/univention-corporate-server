#!/usr/share/ucs-test/runner /usr/share/ucs-test/selenium
## desc: Check if ucr variable umc/http/max-open-file-descriptors works
## packages:
##  - univention-management-console-module-udm
## roles-not:
##  - memberserver
##  - basesystem
## tags:
##  - skip_admember
## join: true
## exposure: dangerous

import subprocess
import time

import univention.testing.ucr as ucr_test
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.common.by import By
from univention.testing import selenium
import traceback

from univention.admin import localization

from univention.config_registry import handler_set, handler_unset
import univention.testing.udm as udm_test

translator = localization.translation("ucs-test-selenium")
_ = translator.translate


class UMCTester:

	def __init__(self, sel, hostname, domainname):

		self.hostname = hostname
		self.domainname = domainname
		self.fqdn = "%s.%s" % (hostname, domainname)

		self.selenium = sel
		self.browser = self.selenium.driver

	def test_umc(self, ucr, udm, max_fd):
		handler_set(['umc/http/max-open-file-descriptors=%s' % max_fd])
		self.systemd_restart("univention-management-console-web-server")
		time.sleep(3)
		try:
			self.test_umc_logon(udm, max_fd)
		finally:
			handler_unset(['umc/http/max-open-file-descriptors'])
			self.systemd_restart("univention-management-console-web-server")

	def count_file_descriptors(self, umc_pid):
		return int(subprocess.check_output("ls -l /proc/" + str(umc_pid) + "/fd | wc -l", shell=True))

	@classmethod
	def systemd_restart(cls, service):
		"""
		check_call runs a command with arguments and waits for command to
		complete. No further wait is necessary.
		"""

		subprocess.check_call(["systemctl", "restart", service])

	def umc_logon(self, username, pw):
		try:

			self.browser.get("http://" + self.fqdn + "/univention/portal/")

			WebDriverWait(self.browser, 30).until(
				expected_conditions.element_to_be_clickable(
					(By.XPATH, '//*[@id="umcLoginButton_label"]')
				)
			).click()
			WebDriverWait(self.browser, 30).until(
				expected_conditions.element_to_be_clickable(
					(By.XPATH, '//*[@id="umcLoginUsername"]')
				)
			).send_keys(username)
			WebDriverWait(self.browser, 30).until(
				expected_conditions.element_to_be_clickable(
					(By.XPATH, '//*[@id="umcLoginPassword"]')
				)
			).send_keys(pw)

			elem = self.browser.find_elements_by_id("umcLoginSubmit")[0]
			elem.click()
		finally:
			print("UMC Logon with {} done".format(username))

	def test_umc_logon(self, udm, max_fd):
		umc_pid = int(subprocess.check_output("pidof -x univention-management-console-web-server".split(" ")))
		print("\n### Increase amount of file_descriptors by logging in ###")

		username = ""
		login_password = "univention"
		for i in range(0, 15):
			_, username = udm.create_user(set={"password": login_password})
			try:
				print("Number of fd before login: %s" % self.count_file_descriptors(umc_pid))
				self.umc_logon(username, login_password)
			except Exception:
				if self.count_file_descriptors(umc_pid) < max_fd - 2:
					traceback.print_exc()
					assert False, "Got an Exception while logging in, without exceeding the number of file descriptors"
				else:
					return
			finally:
				print("Number of fd after login: %s" % self.count_file_descriptors(umc_pid))

			if self.count_file_descriptors(umc_pid) > max_fd + 1:
				assert False, "The amount of file descriptors of the univention-management-console-web-server is exceeded, but not honored"
			self.selenium.end_umc_session()


if __name__ == "__main__":
	with selenium.UMCSeleniumTest() as s, ucr_test.UCSTestConfigRegistry() as ucr, udm_test.UCSTestUDM() as udm:
		max_fd = 21
		umc_tester = UMCTester(s, ucr.get("hostname"), ucr.get("domainname"))
		umc_tester.test_umc(ucr, udm, max_fd)

# vim: ft=python
