#!/usr/share/ucs-test/runner python
# #!/usr/share/ucs-test/runner /usr/bin/py.test -s
## desc: Test to check custom mappings for the AD-Connector
## bugs: [49981]
## roles:
##  - domaincontroller_master
## exposure: dangerous

import univention.testing.utils as utils
from univention.testing.strings import random_username
from univention.testing.connector_common import (
    NormalUser, create_udm_user, create_con_user, delete_udm_user)
import unittest 

import sys, os
sys.path.append('$TESTLIBPATH')
from adconnector import (restart_adconnector, wait_for_sync)
from adconnector import (connector_setup)

# import s4connector
# from s4connector import (connector_running_on_this_host, connector_setup)



import univention.testing.connector_common as tcommon

from ldap import NO_SUCH_OBJECT
import univention.testing.udm as udm_test
import univention.testing.ucr as ucr_test
import adconnector

from univention.testing.udm_extensions import get_extension_name


# import pytest


TEST_ATTRIBUTE_VALUE="BREMEN"
# TEST_ATTRIBUTE_MAPPING={"shortDescription": "l"}

class TestADCustomMappings(unittest.TestCase):
    def setUp(self):
        self.mapping_file = "/etc/univention/connector/ad/localmapping.py"
        self.mapping_file_dir = os.path.dirname(self.mapping_file)

        try:
            os.mkdir(self.mapping_file_dir)
        except OSError:
            print("Directory already exists: %s" % self.mapping_file_dir)

        TEST_MAPPING = (
            "def apply_custom_mapping(univention, ad_mapping):\n"
            "    print('AD_MAPPING for user: %s' % ad_mapping['user'])\n"
            "    ad_mapping['user'].post_attributes['organisation'] =\\\n"
            "        univention.connector.attribute(\n"
            "            ucs_attribute='city',\n"
            "            ldap_attribute='l',\n"
            "            con_attribute='company'\n" # write in 'city' field
            "        )\n"
            "    return ad_mapping\n")

        with open(self.mapping_file, 'w') as f:
            f.write(TEST_MAPPING)

        print("Using as test-mapping:\n%s" % TEST_MAPPING)
        # activate mapping by restarting the ad-connector...
        restart_adconnector()

    def tearDown(self):
        try:
            os.remove(self.mapping_file)
            # deactivate mapping by restarting the ad-connector after file has
            # gone...
            restart_adconnector()
        except OSError:
            print("Surprising, that there is nothing to remove from this test.")

    # def runTest(self):
    def test_ldap_to_ad_with_mapping(self):
        # this test will try to create a mapping so that the
        # univentionFreeAttribute20 will be available in AD as a DisplayName
        # attribute for each user.
        #

        # udm = udm_test.UCSTestUDM()
        #
        ldap_base = "?"
        with ucr_test.UCSTestConfigRegistry() as ucr:
            ldap_base = ucr['ldap/base'];

        adc = adconnector.ADConnection()
        # TODO: with adconnector.ADConnection() as adc: does not work for some reason

        with udm_test.UCSTestUDM() as udm:

            # self.assertTrue(False) # TODO: with the ADConnector in a with block this assertion does not cause the test to fail
            ucr.load()

            try:
                # create an extended attribute...
                udm.create_object(
                    'settings/extended_attribute',
                    position='cn=custom attributes,cn=univention,%s' % ucr['ldap/base'],
                    **dict(
                        name='univentionFreeAttribute20',
                        ldapMapping='univentionFreeAttribute20', # mandatory
                        objectClass='univentionFreeAttributes',  # mandatory
                        shortDescription=TEST_ATTRIBUTE_VALUE,
                        valueRequired='1',
                        CLIName='test',
                        module=['users/user'],
                        default="defaultvalue"
                    )
                )
            except udm_test.UCSTestUDM_CreateUDMObjectFailed as e:
                print("!Warning: Failed to create test attribute: %s, ignoring this error." % e.message)
                pass

            # create a random user
            udm_user = NormalUser(selection=("username", "lastname"))
            udm_user.basic["password"] = "univention"
            udm_user.basic["shortDescription"] = "FOOBAR"
            udm_user.basic["city"] = TEST_ATTRIBUTE_VALUE
            udm_user.basic["organisation"] = "UNIVENTION"
            # udm_user.basic[""]
            print("[!] DER UDM USER : %s" % udm_user)

            (udm_user_dn, ad_user_dn) = create_udm_user(udm, adc, udm_user, wait_for_sync)
            print("Summary of users to be synchronized:\n\tudm_user_dn:\t%s,\n\ts4_user_dn:\t%s" % (udm_user_dn, ad_user_dn))


            # verify, that the extended attribute has been written into the ad user
            # ad_user_dn = 'CN=r3145nu77a,CN=users,DC=windom,DC=test'
            self.assertTrue(adc.exists(ad_user_dn))
            self.assertEqual(adc.get_attribute(ad_user_dn, 'company'), [TEST_ATTRIBUTE_VALUE])

            # attribute = self.check_ad_attribute(adc, ad_user_dn, "displayName")
            # retval = adc.get(dn, ['lastname', 'firstname', 'description', 'telephoneNumber', 'givenName', 'sn', 'samAccountName', 'l'])

            # raise Exception("Test failed: Extended attribute has not been passed over into the active directory under another name.")

            # tcommon.verify_udm_object("users/user", udm_user_dn, {ucs_attribute: all_values})
            # udm.create_object(
            #     "users/user",
            #     position="cn=users,dc=testosteron,dc=intranet",
            #     **udm_user.basic
            # )

            # dn = self.create_test_attribute(udm)
            # print("Test attribute: %s" % dn)
            #
            # wait_for_sync()

            # (basic_ad_user, ad_user_dn, udm_user_dn) = create_con_user(
            #     adc, self.udm_user, wait_for_sync)





            # delete_con_user(adc, ad_user_dn, udm_user_dn, adconnector.wait_for_sync)

    def create_test_attribute(self, udm, attr='univentionFreeAttribute20'):
        extension_type = 'module'
        extension_name = get_extension_name(extension_type)

        with ucr_test.UCSTestConfigRegistry() as ucr:
            ucr.load()
            print(self.udm_user)
            kwargs = dict(name=self.udm_user.user['username'], ldapMapping='foo', objectClass='bar', shortDescription='test', valueRequired='1', CLIName='test', module=['users/user'])

            with pytest.raises(udm_test.UCSTestUDM_CreateUDMObjectFailed):
                udm.create_object('settings/extended_attribute', position='cn=custom attributes,cn=univention,%s' % ucr['ldap/base'], **kwargs)
            kwargs['default'] = 'foo'
            extattr_dn = udm.create_object('settings/extended_attribute', position='cn=custom attributes,cn=univention,%s' % ucr['ldap/base'], **kwargs)

            # extattr_dn = udm.create_object(
            #     'settings/extended_attribute',
            #     position='cn=custom attributes,cn=univention,%s' % ucr['ldap/base'], **kwargs)

            return extattr_dn

    def check_ad_attribute(self, adc, dn, attr='univentionFreeAttribute20'):
        try:
            return adc.get(adc.get(dn, [attr]))
        except NO_SUCH_OBJECT:
            print("object not found: %s" % e.message)


if __name__ == "__main__":
    unittest.main()


# vim: filetype=python noexpandtab tabstop=4 shiftwidth=4 softtabstop=4
