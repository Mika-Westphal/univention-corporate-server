#!/usr/share/ucs-test/runner python
# #!/usr/share/ucs-test/runner /usr/bin/py.test -s
## desc: Test to check custom mappings for the AD-Connector
## bugs: [49981]
## roles:
##  - domaincontroller_master
## exposure: dangerous

import unittest 
import sys, os
sys.path.append('$TESTLIBPATH')

import univention.testing.udm as udm_test
import univention.testing.ucr as ucr_test

from univention.testing.strings import random_username, random_string
from univention.testing.connector_common import (NormalUser, create_udm_user)
from adconnector import (ADConnection, restart_adconnector, wait_for_sync)

class TestADCustomMappings(unittest.TestCase):
    def setUp(self):
        with ucr_test.UCSTestConfigRegistry() as ucr:
            ucr.load()
            self.ldap_base = ucr['ldap/base']

        self.mapping_file = "/etc/univention/connector/ad/localmapping.py"
        self.mapping_file_dir = os.path.dirname(self.mapping_file)

        try:
            os.mkdir(self.mapping_file_dir)
        except OSError:
            print("Directory already exists: %s" % self.mapping_file_dir)

        TEST_MAPPING = (
            "import univention.connector\n"
            "def mapping_hook(ad_mapping):\n"
            "    ad_mapping['user'].post_attributes['organisation'] =\\\n"
            "        univention.connector.attribute(\n"
            "            ucs_attribute='univentionFreeAttribute20',\n"
            "            ldap_attribute='univentionFreeAttribute20',\n"
            "            con_attribute='company'\n" # write in 'city' field
            "        )\n"
            "    return ad_mapping\n")

        with open(self.mapping_file, 'w') as f:
            f.write(TEST_MAPPING)

        print("Using as test-mapping:\n%s" % TEST_MAPPING)
        # activate mapping by restarting the ad-connector...
        restart_adconnector()

        self.udm = udm_test.UCSTestUDM()
        self.adc = ADConnection()

    def tearDown(self):
        try:
            self.udm.cleanup()
            os.remove(self.mapping_file)
            # deactivate mapping by restarting the ad-connector after file has
            # gone...
            restart_adconnector()

        except OSError:
            print("Surprising, that there is nothing to remove from this test.")


    def create_extended_attribute(self, udm, ldapMapping, module, defaultValue="defaultValue-TestFailed"):

        """
        Creates an extended attribute with a default value under module (e.g.
        under 'user/user')
        """

        print("Creating extended attribute '%s' under '%s' with default value '%s'" % (
            ldapMapping, self.ldap_base, defaultValue))

        udm.create_object(
            'settings/extended_attribute',
            position='cn=custom attributes,cn=univention,%s' % self.ldap_base,
            **dict(
                name=ldapMapping,
                ldapMapping=ldapMapping,                 # mandatory
                CLIName=ldapMapping,                     # mandatory
                objectClass='univentionFreeAttributes',  # mandatory
                shortDescription=("test value: %s" % defaultValue),
                valueRequired='1',
                module=[module],
                default=defaultValue
            )
        )

    def test_ldap_to_ad_with_mapping(self):

        """
        this test will try to create a mapping so that the
        univentionFreeAttribute20 will be available in AD as a DisplayName
        attribute for each user.
        """

        test_string = random_string()
        attribute = "univentionFreeAttribute20"
        self.create_extended_attribute(self.udm, attribute, "users/user")

        # create a random user
        udm_user = NormalUser(selection=("username", "lastname"))
        udm_user.basic["password"] = "univention"
        udm_user.basic[attribute] = test_string
        udm_user.basic["description"] = ("test value: '%s'" % test_string) # useful as debugging hint
        udm_user.basic["o"] = "test failed :("

        (udm_user_dn, ad_user_dn) = create_udm_user(self.udm, self.adc, udm_user, wait_for_sync)
        print("Summary of users to be synchronized:\n\tudm_user_dn:\t%s,\n\ts4_user_dn:\t%s" % (udm_user_dn, ad_user_dn))

        # verify that the user exists on the 'ad-side'...
        self.assertTrue(self.adc.exists(ad_user_dn))

        # check the value from the mapping
        self.assertEqual(self.adc.get_attribute(ad_user_dn, 'company'), [test_string])


if __name__ == "__main__":
    unittest.main()

# vim: filetype=python expandtab tabstop=4 shiftwidth=4 softtabstop=4
