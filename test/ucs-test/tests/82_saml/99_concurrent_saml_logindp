#!/usr/share/ucs-test/runner python
## desc: Test portal performance and login
## tags: [saml]
## join: true
## exposure: safe
## packages:
##   - python-requests
## tags:
##  - skip_admember

from __future__ import print_function
import samltest
import threading
import timeit
import time
import sys
import gc
import univention.testing.utils as utils


parallel_logins = 8
max_logins = 1600
number_of_runs = 1
exc_store = None


def main(i):
	global exc_store
	# time.sleep(i * .002)
	account = utils.UCSTestDomainAdminCredentials()
	SamlSession = samltest.SamlTest(account.username, account.bindpw)
	try:
		SamlSession.login_with_new_session_at_IdP()
		SamlSession.test_login()
		# SamlSession.test_portal()
		# SamlSession.logout_at_IdP()
		# SamlSession.test_logout_at_IdP()
		# SamlSession.test_logout()
	except Exception as exc:
		exc_store[i] = exc


def parallel_main():
	logins = 0
	global exc_store
	exc_store = [None for _ in range(parallel_logins)]
	test_threads = []
	while max_logins > logins:
		test_threads_tmp = [threading.Thread(target=main, args=(i, ) ) for i in range(parallel_logins)]
		for test_thread in test_threads_tmp:
			test_thread.start()
		test_threads += test_threads_tmp
		logins += parallel_logins
		time.sleep(1)
		gc.collect()
		if [test_thread.is_alive() for test_thread in test_threads].count(True) > 10 * parallel_logins:
			raise Exception('Too many waiting logins')
	for test_thread in test_threads:
		test_thread.join()
	print("####\n" * 5)
	if not any(exc_store):
		print("####Success: SSO login is working####")
	else:
		print("####FAIL: SSO login failed####")
		print(len(exc_store))
		for exc_drawer in exc_store:
			if exc_drawer is not None:
				print(exc_drawer)
			sys.exit(1)


if __name__ == '__main__':
	runtime = timeit.timeit('parallel_main()', setup='from __main__ import main, parallel_main, parallel_logins', number=number_of_runs)
	print("Mean time per portal login {}".format(runtime / number_of_runs / float(parallel_logins)))

