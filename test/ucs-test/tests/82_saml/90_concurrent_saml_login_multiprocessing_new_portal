#!/usr/share/ucs-test/runner python
## desc: Test portal performance and login of DC master (multiprocessing)
## tags: [saml]
## join: true
## exposure: safe
## packages:
##   - python-requests
## tags:
##  - skip_admember

from __future__ import print_function
import samltest
import sys
import time
import random
import univention.testing.utils as utils


parallel_logins = 50
number_of_logins = parallel_logins * 10
exc_store = None


def main(i):
	global exc_store
	time.sleep(random.randint(0, 50)/100.0)
	account = utils.UCSTestDomainAdminCredentials()
	SamlSession = samltest.SamlTest(account.username, account.bindpw)
	SamlSession.target_sp_hostname = SamlSession.ucr['ldap/master']
	try:
		SamlSession.login_with_new_session_at_IdP(portal=True)
		SamlSession.test_login(portal=True)
		# SamlSession.test_portal()
		# SamlSession.logout_at_IdP(portal=True)
		# SamlSession.test_logout_at_IdP()
		# SamlSession.test_logout()
	except Exception as exc:
		return exc
	return None


def parallel_main():
	global exc_store
	from multiprocessing import Pool
	pool = Pool(parallel_logins)

	result = pool.map(main, range(number_of_logins))
	fail = False
	for i, item in enumerate(result):
		if item is None:
			# print("####Success {}: SSO login is working####".format(i))
			pass
		else:
			print("####FAIL {}: SSO login failed####".format(i))
			fail = True
	return fail


if __name__ == '__main__':
	start_time = time.time()
	fail = parallel_main()
	runtime = time.time() - start_time
	print("Mean time per portal login {}".format(runtime / float(number_of_logins)))
	print("Number of logins per second: {}".format(1 / (runtime / float(number_of_logins))))
	if fail:
		sys.exit(1)

