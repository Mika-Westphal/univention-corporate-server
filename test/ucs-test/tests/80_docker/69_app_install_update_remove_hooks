#!/usr/share/ucs-test/runner python
## desc: Test update-certificates
## tags: [docker]
## exposure: dangerous
## packages:
##   - docker.io

import os
import sys
import stat

from dockertest import (
	Appcenter,
	App,
	get_app_name,
	UCSTest_Docker_Exception,
	tiny_app
)

class AssertionFailed(Exception):
	pass


actions = ["install", "upgrade", "remove"]
# a log file to store the results (line based)...
file_result = "/tmp/69_app_install_update_remove_hooks.result"
# the path, where -by convention- script hooks have to be stored (app specific)
path_hooks = "/var/lib/univention-appcenter/apps/{appid}/local/hooks"


def get_code_position(color_start="\033[0;31m", color_stop="\033[0;0m"):
	# not every python version has _getframe. We will only return a separator,
	# if we cannot determine the position. It is then up to the developer to
	# count the number of calls to find the position.
	if hasattr(sys, '_getframe'):
		return((color_start + "# %-*s" + color_stop) % (
			78, sys._getframe(1).f_code.co_filename + ":"
			+ str(sys._getframe(1).f_lineno) + ' ['
			+ sys._getframe(1).f_code.co_name + ']')).replace(
			'  ', '..')
	else:
		return color_start + ("%80s" % '').replace(' ', '=') + color_stop


def setup(app_name):
	"""
	the setup creates the necessary script hook folders and places a script in
	each of them with the filename being the action name. The script will
	append its own name to `file_result` when executed.
	"""


	# try to create an empty result file...
	with open(file_result, "w") as f:
		f.close()

	# the same script will be placed in all script hook folders, always named
	# after the action it is for.  It prints its filename into $result_file-
	# appends one line & that is the test condition.
	test_script = '#!/bin/sh' \
		'\n' '# This script prints the current date and its own name' \
		'\n' 'date -Is' \
		'\n' 'echo "$0" >> {file_result}'.format(file_result=file_result)
	#   ^ NOTE: ticks are intentional!

	for action in actions:

		script_hook_path = '{hook_path}/post-{action}.d'.format(
			hook_path=path_hooks.format(appid=app_name),
			action=action
		)

		script_hook_file = "{pathname}/{filename}".format(
			pathname=script_hook_path,
			filename=action
		)

		# create the hook directory only if it does not exist yet
		try:
			os.makedirs(script_hook_path, mode=0o777)
		except Exception:
			# we know well enough what went wrong and can savely ignore it. In
			# python3 however os.makedirs has an `exist_ok`-parameter which should
			# be used instead of this block.
			pass

		try:
			# create a script file in the hook directory...
			with open(script_hook_file, 'w') as f:
				f.write(test_script)

			# add the executable flag to the file permissions...
			os.chmod(
				script_hook_file,
				os.stat(script_hook_file).st_mode | stat.S_IEXEC)

		except Exception as e:
			print("Error with file '{filename}': {error}".format(
				error=e,
				filename=script_hook_file)
			)


def app_install(appcenter, app_name):
	print(get_code_position())

	app = tiny_app(app_name, '3.6')
	app.set_ini_parameter(DockerImage='docker-test.software-univention.de/alpine:3.6')

	app.add_to_local_appcenter()
	appcenter.update()

	app.install()  # install the app
	app.verify(joined=False)
	return app


def app_upgrade(appcenter, app_name):
	print(get_code_position())

	app = tiny_app(app_name, '3.7')
	app.set_ini_parameter(DockerImage='docker-test.software-univention.de/alpine:3.7')

	app.add_to_local_appcenter()
	appcenter.update()

	app.upgrade()  # now upgrade the app
	app.verify(joined=False)
	return app


def app_remove(app):
	print(get_code_position())

	app.uninstall()
	app.remove()

def verify_test_results_and_exit():
	"""
	function outputs all test results and checks if the result file contains
	the names of all actions (install/upgrade/remove).
	"""

	with open(file_result, 'r') as f:

		# now check if all actions were executed and abort otherwise...
		for action in actions:
			f.seek(0)  # rewind before every new search
			if not (action in f.read()):
				raise(AssertionFailed(
					"Expected to find '%s' in file '%s',"
					" but it was not there." % (action, file_result)), 2)



if __name__ == '__main__':
	"""
	This test tests three hook directories: install, update and remove. Each of
	these actions should then execute its hook scripts and if that works a
	resulting log file contains their script file names.
	"""

	app_name = get_app_name()  # returns an arbitrary app

	setup(app_name)

	with Appcenter() as appcenter:
		app = app_install(appcenter, app_name)
		app = app_upgrade(appcenter, app_name)
		app_remove(app)

	verify_test_results_and_exit()


# vim: ft=python
