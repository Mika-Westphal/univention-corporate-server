#!/usr/bin/python3
# -*- coding: utf-8 -*-
#
# Copyright 2020 Univention GmbH
#
# http://www.univention.de/
#
# All rights reserved.
#
# The source code of this program is made available
# under the terms of the GNU Affero General Public License version 3
# (GNU AGPL V3) as published by the Free Software Foundation.
#
# Binary versions of this program provided by Univention to you as
# well as other copyrighted, protected or trademarked materials like
# Logos, graphics, fonts, specific documentations and configurations,
# cryptographic keys etc. are subject to a license agreement between
# you and Univention and not subject to the GNU AGPL V3.
#
# In the case you use this program under the terms of the GNU AGPL V3,
# the program is provided in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public
# License with the Debian GNU/Linux or Univention distribution in file
# /usr/share/common-licenses/AGPL-3; if not, see
# <http://www.gnu.org/licenses/>.

import json
import re
import os
from subprocess import run, PIPE

#from univention.admindiary.client import write

from univention.customize_texts import get_l10n_infos, get_customized_texts, get_l10n_info
import univention.customize_texts.check as customize_texts_check
import univention.customize_texts.rebuild as customize_texts_rebuild
import univention.customize_texts.overwrite as customize_texts_overwrite

import click

@click.group(help="Tool to customize texts in UMC Frontend.")
def cli():
    pass


@cli.command(help="Lists all possible packages", name="list")
def list_command():
    """Lists all possible packages. Packages may have suffixes if they provide multiple
    sections of texts.

    The values in this list can be used as arguments to other subcommands
    """
    for l10n_info in get_l10n_infos():
        print(str(l10n_info))


@cli.command(help="Lists all overwrites", name="list-overwrites")
def list_overwrites():
    for l10n_info in get_l10n_infos():
        for texts in get_customized_texts(l10n_info):
            locale = texts.locale
            diff_fname = l10n_info.diff_fname(locale)
            try:
                with open(diff_fname) as fd:
                    diff = json.load(fd)
            except EnvironmentError:
                continue
            print("{} {}".format(l10n_info, locale))
            for key in sorted(diff):
                print("  {}".format(key))
                print("    {}".format(diff[key]))


@cli.command(help="Search for text in all supported files")
@click.argument("pattern")
def search(pattern):  # type: (str) -> None
    pattern = re.compile(pattern)
    for l10n_info in get_l10n_infos():
        for locale, fname in l10n_info.get_all_current_files():
            seen = False
            Reader = l10n_info.get_reader()
            reader = Reader(fname)
            content = reader.read()
            for key in sorted(content):
                value = content[key]
                if pattern.match(key) or pattern.match(value):
                    if not seen:
                        seen = True
                        print("{} {}".format(l10n_info, locale))
                    print("  {}".format(key))
                    print("    {}".format(value))


@cli.command()
@click.argument("pkg")
@click.argument("locale")
@click.argument("key")
def undo(pkg, locale, key):
    """
    Undo an existing overwrite for a given KEY in the PKG and LOCALE

    PKG can the be the package name, e.g. univention-self-service. It may be suffixed if needed: univention-self-service:hooks
    See subcommand "list" for possible values
    """
    l10n_info = get_l10n_info(pkg)
    diff_fname = l10n_info.diff_fname(locale)
    try:
        with open(diff_fname) as fd:
            diff = json.load(fd)
    except EnvironmentError:
        diff = {}
    diff.pop(key, None)
    if diff:
        with open(diff_fname, "w") as fd:
            json.dump(diff, fd)
        customize_texts_rebuild.rebuild([l10n_info])
    else:
        try:
            os.unlink(diff_fname)
        except EnvironmentError:
            pass
        dest_fname = l10n_info.get_dest_fname(locale)
        try:
            os.unlink(dest_fname)
        except EnvironmentError:
            pass
        run(["dpkg-divert", "--local", "--rename", "--remove", dest_fname], stdout=PIPE)
        print("No more overwrites for {} {}. Restored original".format(pkg, locale))
    #if existed:
    #    write(
    #        {
    #                "en": "In {pkg}, the text \"{key}\" is no longer customized for {locale}",
    #                "de": "In {pkg} wurde der Text \"{key}\" für die Sprache {locale} zurückgesetzt",
    #        },
    #        {"pkg": pkg, "key": key, "locale": locale},
    #        tags=["univention-customize-texts"],
    #        context_id=get_admin_diary_context(pkg),
    #        event_name="CUSTOMIZE_TEXTS_REMOVED",
    #    )


@cli.command()
@click.argument("pkg")
@click.argument("locale")
def show(pkg, locale):
    """
    Shows all current texts in PKG for LOCALE
    """
    l10n_info = get_l10n_info(pkg)
    fname = l10n_info.get_dest_fname(locale)
    Reader = l10n_info.get_reader()
    reader = Reader(fname)
    content = reader.read()
    print("{} {}".format(l10n_info, locale))
    for key in sorted(content):
        value = content[key]
        print("  {}".format(key))
        print("    {}".format(value))


@cli.command(help="Check if all custom texts are still applicable")
def check():
    customize_texts_check.check()


@cli.command(help="Reapply all changes to the original files")
def rebuild():
    customize_texts_rebuild.rebuild()


@cli.command()
@click.argument("pkg")
@click.argument("locale")
@click.argument("key")
@click.argument("text")
def overwrite(pkg, locale, key, text):
    """
    Overwrites a given KEY with your custom TEXT in the PKG and LOCALE

    PKG can the be the package name, e.g. univention-self-service. It may be suffixed if needed: univention-self-service:hooks
    See subcommand "list" for possible values
    """
    customize_texts_overwrite.overwrite(pkg, locale, key, text)


if __name__ == "__main__":
    cli()
