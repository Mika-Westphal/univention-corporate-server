#!/usr/bin/python3
# -*- coding: utf-8 -*-
#
# Copyright 2020 Univention GmbH
#
# http://www.univention.de/
#
# All rights reserved.
#
# The source code of this program is made available
# under the terms of the GNU Affero General Public License version 3
# (GNU AGPL V3) as published by the Free Software Foundation.
#
# Binary versions of this program provided by Univention to you as
# well as other copyrighted, protected or trademarked materials like
# Logos, graphics, fonts, specific documentations and configurations,
# cryptographic keys etc. are subject to a license agreement between
# you and Univention and not subject to the GNU AGPL V3.
#
# In the case you use this program under the terms of the GNU AGPL V3,
# the program is provided in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public
# License with the Debian GNU/Linux or Univention distribution in file
# /usr/share/common-licenses/AGPL-3; if not, see
# <http://www.gnu.org/licenses/>.

import click
import os
import json
import polib

from univention.customize_texts import get_l10n_infos
import univention.customize_texts.check as customize_texts_check
import univention.customize_texts.rebuild as customize_texts_rebuild
import univention.customize_texts.overwrite as customize_texts_overwrite

L10_FOLDER = "/usr/share/univention-customize-texts/l10n-files"
OVERWRITE_FOLDER = "/usr/share/univention-customize-texts/overwrites"


def load_json(file):
	assert os.path.isfile(file)
	with open(file) as fp:
		data = json.load(fp)
	return data


def l10_file_destinations(file):  # type: (str) -> str
	for entry in load_json(file):
		yield "/{}".format(entry["destination"])


@click.group(help="Tool to customize texts in UMC Frontend.")
def cli():
	pass


@cli.command(help="Lists all possible packages", name='list')
def list_command():
    """Lists all possible packages. Packages may have suffixes if they provide multiple
    sections of texts.

    The values in this list can be used as arguments to other subcommands
    """
    for l10n_info in get_l10n_infos():
        if l10n_info.suffix:
            print("{}:{}".format(l10n_info.pkg, l10n_info.suffix))
        else:
            print(l10n_info.pkg)


@cli.command(help="Lists all overwrites")
def list_overwrites():
	for sub in os.listdir(OVERWRITE_FOLDER):
		if os.path.isdir(os.path.join(OVERWRITE_FOLDER, sub)):
			result = [os.path.join(dp, f) for dp, dn, filenames in os.walk(OVERWRITE_FOLDER) for f in filenames if
					os.path.basename(f) == 'diff.json']
			for file in result:
				locale = os.path.basename(os.path.dirname(file))
				click.echo("{} {}".format(sub, locale))
				data = load_json(file)
				for key in data:
					click.echo("\t'{}' '{}'".format(key, data[key]))


@cli.command(help="Search for text in all supported files")
@click.option("--text", "-t", is_flag=False)
def search(text):  # type: (str) -> None
	assert os.path.isdir(L10_FOLDER)
	for file in os.listdir(L10_FOLDER):
		package = os.path.splitext((os.path.basename(file)))[0]
		for destination in l10_file_destinations(os.path.join(L10_FOLDER, file)):
			destination = destination.format(lang='de')
			matches = []
			if os.path.splitext(destination)[1] == '.json':
				data = load_json(destination)
				matches = [(key, value) for key, value in data.items() if text == value]
			elif os.path.splitext(destination)[1] == '.mo':
				mo = polib.mofile(destination)
				matches = [(entry.msgid, entry.msgstr) for entry in mo if text == entry.msgstr]
			if matches:
				click.echo(package)
				for key, value in matches:
					if text == value:
						click.echo('\t"{}" "{}"'.format(key, value))


@cli.command(help="Check if all custom texts are still applicable")
def check():
	customize_texts_check.check()


@cli.command(help="Reapply all changes to the original files")
def rebuild():
	customize_texts_rebuild.rebuild()


@cli.command()
@click.argument("pkg")
@click.argument("locale")
@click.argument("key")
@click.argument("text")
def overwrite(pkg, locale, key, text):
    """
    Overwrites a given KEY with your custom TEXT in the PKG and LOCALE

    PKG can the be the package name, e.g. univention-self-service. It may be suffixed if needed: univention-self-service:hooks
    See subcommand "list" for possible values
    """
    customize_texts_overwrite.overwrite(pkg, locale, key, text)


if __name__ == '__main__':
	cli()
